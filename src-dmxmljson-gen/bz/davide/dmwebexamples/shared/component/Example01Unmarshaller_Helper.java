/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.dmwebexamples.shared.component;


public class Example01Unmarshaller_Helper extends bz.davide.dmwebexamples.shared.Example01Unmarshaller_Helper
{
   protected Example01Unmarshaller_Helper()
   {
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.Calculator", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.Calculator((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.Calculator", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.DivView", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // inputView
            if ((value = structure.property("inputView")) != null)
               if (value.isNull())
                  ((Calculator)obj).inputView = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Calculator)obj).inputView = (bz.davide.dmweb.shared.view.InputView)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("InputView"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Calculator)obj).inputView = (bz.davide.dmweb.shared.view.InputView)o;
                  }
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.NumberButtonClick", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.NumberButtonClick((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.NumberButtonClick", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // calculator
            if ((value = structure.property("calculator")) != null)
               if (value.isNull())
                  ((NumberButtonClick)obj).calculator = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((NumberButtonClick)obj).calculator = (bz.davide.dmwebexamples.shared.component.Calculator)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Calculator"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((NumberButtonClick)obj).calculator = (bz.davide.dmwebexamples.shared.component.Calculator)o;
                  }
               }
            // num
            if ((value = structure.property("num")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((NumberButtonClick)obj).num = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.PhotoGallery", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.PhotoGallery((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.PhotoGallery", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.DivView", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // currIndex
            if ((value = structure.property("currIndex")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((PhotoGallery)obj).currIndex = (int)value.integer();
               }
            // imageBoxes
            if ((value = structure.property("imageBoxes")) != null)
               if (value.isNull())
                  ((PhotoGallery)obj).imageBoxes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("DivView"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((PhotoGallery)obj).imageBoxes = arrayList;
               }
            // lastIndex
            if ((value = structure.property("lastIndex")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((PhotoGallery)obj).lastIndex = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.PhotoGalleryAttachListener", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.PhotoGalleryAttachListener((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.PhotoGalleryAttachListener", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // gallery
            if ((value = structure.property("gallery")) != null)
               if (value.isNull())
                  ((PhotoGalleryAttachListener)obj).gallery = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((PhotoGalleryAttachListener)obj).gallery = (bz.davide.dmwebexamples.shared.component.PhotoGallery)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("PhotoGallery"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((PhotoGalleryAttachListener)obj).gallery = (bz.davide.dmwebexamples.shared.component.PhotoGallery)o;
                  }
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.Notepad", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.Notepad((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.Notepad", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.DivView", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // localStorageKeyName
            if ((value = structure.property("localStorageKeyName")) != null)
               if (value.isNull())
                  ((Notepad)obj).localStorageKeyName = null;
               else
               {
                  ((Notepad)obj).localStorageKeyName = value.string();
               }
            // textArea
            if ((value = structure.property("textArea")) != null)
               if (value.isNull())
                  ((Notepad)obj).textArea = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Notepad)obj).textArea = (bz.davide.dmweb.shared.view.TextAreaView)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("TextAreaView"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Notepad)obj).textArea = (bz.davide.dmweb.shared.view.TextAreaView)o;
                  }
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.NotepadSave", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.NotepadSave((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.NotepadSave", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // notepad
            if ((value = structure.property("notepad")) != null)
               if (value.isNull())
                  ((NotepadSave)obj).notepad = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((NotepadSave)obj).notepad = (bz.davide.dmwebexamples.shared.component.Notepad)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Notepad"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((NotepadSave)obj).notepad = (bz.davide.dmwebexamples.shared.component.Notepad)o;
                  }
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmwebexamples.shared.component.NotepadAttach", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmwebexamples.shared.component.NotepadAttach((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmwebexamples.shared.component.NotepadAttach", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // notepad
            if ((value = structure.property("notepad")) != null)
               if (value.isNull())
                  ((NotepadAttach)obj).notepad = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((NotepadAttach)obj).notepad = (bz.davide.dmwebexamples.shared.component.Notepad)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Notepad"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((NotepadAttach)obj).notepad = (bz.davide.dmwebexamples.shared.component.Notepad)o;
                  }
               }
         }
      });

   }
}
